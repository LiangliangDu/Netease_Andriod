package org.nicehiro.ormtest.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.nicehiro.ormtest.ormsql.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UId = new Property(1, String.class, "uId", false, "U_ID");
        public final static Property YId = new Property(2, String.class, "yId", false, "Y_ID");
        public final static Property Gender = new Property(3, int.class, "gender", false, "GENDER");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Photourl = new Property(5, String.class, "photourl", false, "PHOTOURL");
        public final static Property Name = new Property(6, String.class, "name", false, "nickname");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"U_ID\" TEXT NOT NULL ," + // 1: uId
                "\"Y_ID\" TEXT," + // 2: yId
                "\"GENDER\" INTEGER NOT NULL ," + // 3: gender
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"PHOTOURL\" TEXT," + // 5: photourl
                "\"nickname\" TEXT);"); // 6: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUId());
 
        String yId = entity.getYId();
        if (yId != null) {
            stmt.bindString(3, yId);
        }
        stmt.bindLong(4, entity.getGender());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String photourl = entity.getPhotourl();
        if (photourl != null) {
            stmt.bindString(6, photourl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUId());
 
        String yId = entity.getYId();
        if (yId != null) {
            stmt.bindString(3, yId);
        }
        stmt.bindLong(4, entity.getGender());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String photourl = entity.getPhotourl();
        if (photourl != null) {
            stmt.bindString(6, photourl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // yId
            cursor.getInt(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photourl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUId(cursor.getString(offset + 1));
        entity.setYId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.getInt(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhotourl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
